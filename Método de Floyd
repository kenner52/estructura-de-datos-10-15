public class MétododeFloyd {
    static final int V = 4; 
    static final int INF = 99999;

    public static void floydWarshall(int graph[][]) {
        int dist[][] = new int[V][V];
        int next[][] = new int[V][V];

        for (int i = 0; i < V; i++) {
            for (int j = 0; j < V; j++) {
                dist[i][j] = graph[i][j];
                if (graph[i][j] != INF && i != j) {
                    next[i][j] = j;
                } else {
                    next[i][j] = -1;
                }
            }
        }

        for (int k = 0; k < V; k++) {
            for (int i = 0; i < V; i++) {
                for (int j = 0; j < V; j++) {
                    if (dist[i][k] + dist[k][j] < dist[i][j]) {
                        dist[i][j] = dist[i][k] + dist[k][j];
                        next[i][j] = next[i][k];
                    }
                }
            }
        }

        System.out.println("Matriz de distancias más cortas:");
        for (int i = 0; i < V; i++) {
            for (int j = 0; j < V; j++) {
                if (dist[i][j] == INF) {
                    System.out.print("INF ");
                } else {
                    System.out.print(dist[i][j] + "   ");
                }
            }
            System.out.println();
        }

        System.out.print("\nCamino mínimo de 0 a 3: ");
        printPath(0, 3, next);
        System.out.println();
        System.out.println("Distancia: " + dist[0][3]);
    }

    public static void printPath(int u, int v, int next[][]) {
        if (next[u][v] == -1) {
            System.out.print("No existe camino");
            return;
        }
        System.out.print(u);
        while (u != v) {
            u = next[u][v];
            System.out.print(" -> " + u);
        }
    }

    public static void main(String[] args) {
        int graph[][] = {
            {0,   5,  INF, 10},
            {INF, 0,   3,  INF},
            {INF, INF, 0,   1},
            {INF, INF, INF, 0}
        };

        floydWarshall(graph);
    }
}
