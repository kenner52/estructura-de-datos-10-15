import java.util.*;

public class CaminoCortoBFS {
    static int N = 6; 
    static ArrayList<Integer>[] grafo = new ArrayList[N];

    public static void main(String[] args) {
        for (int i = 0; i < N; i++) {
            grafo[i] = new ArrayList<>();
        }

        agregarConexion(0, 1);
        agregarConexion(0, 2);
        agregarConexion(1, 3);
        agregarConexion(2, 3);
        agregarConexion(3, 4);
        agregarConexion(4, 5);

        int origen = 0;
        int destino = 5;

        List<Integer> camino = bfsCamino(origen, destino);

        if (camino.isEmpty()) {
            System.out.println("No existe camino.");
        } else {
            System.out.print("Camino mas corto -> ");
            for (int i = 0; i < camino.size(); i++) {
                if (i > 0) System.out.print(" -> ");
                System.out.print(camino.get(i));
            }
        }
    }

    static void agregarConexion(int u, int v) {
        grafo[u].add(v);
        grafo[v].add(u);
    }

    static List<Integer> bfsCamino(int origen, int destino) {
        boolean[] visitado = new boolean[N];
        int[] previo = new int[N];
        Arrays.fill(previo, -1);

        Queue<Integer> cola = new LinkedList<>();
        cola.add(origen);
        visitado[origen] = true;

        while (!cola.isEmpty()) {
            int actual = cola.poll();
            if (actual == destino) break;
            for (int vecino : grafo[actual]) {
                if (!visitado[vecino]) {
                    visitado[vecino] = true;
                    previo[vecino] = actual;
                    cola.add(vecino);
                }
            }
        }

        List<Integer> camino = new ArrayList<>();
        if (!visitado[destino]) return camino;

        for (int at = destino; at != -1; at = previo[at]) {
            camino.add(at);
        }
        Collections.reverse(camino);
        return camino;
    }
}
