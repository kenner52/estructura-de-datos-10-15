import java.util.*;

public class CaminoCortoBFS {
    static int V = 6; 

    
    static void bfs(List<List<Integer>> graph, int origen, int destino) {
        boolean[] visitado = new boolean[V];
        int[] padre = new int[V]; 
        Arrays.fill(padre, -1);

        Queue<Integer> cola = new LinkedList<>();
        cola.add(origen);
        visitado[origen] = true;

        while (!cola.isEmpty()) {
            int actual = cola.poll();

            if (actual == destino) break; 

            for (int vecino : graph.get(actual)) {
                if (!visitado[vecino]) {
                    visitado[vecino] = true;
                    padre[vecino] = actual; 
                    cola.add(vecino);
                }
            }
        }

    
        List<Integer> camino = new ArrayList<>();
        for (int at = destino; at != -1; at = padre[at]) {
            camino.add(at);
        }
        Collections.reverse(camino);

       
        System.out.print("Camino más corto → ");
        for (int i = 0; i < camino.size(); i++) {
            System.out.print(camino.get(i));
            if (i < camino.size() - 1) System.out.print(" → ");
        }
        System.out.println();
    }

    public static void main(String[] args) {
       
        List<List<Integer>> graph = new ArrayList<>();
        for (int i = 0; i < V; i++) graph.add(new ArrayList<>());


        graph.get(0).add(1);
        graph.get(1).add(0);

        graph.get(0).add(2);
        graph.get(2).add(0);

        graph.get(1).add(3);
        graph.get(3).add(1);

        graph.get(2).add(3);
        graph.get(3).add(2);

        graph.get(3).add(4);
        graph.get(4).add(3);

        graph.get(4).add(5);
        graph.get(5).add(4);

     
        int origen = 0, destino = 5;

      
        bfs(graph, origen, destino);
    }
}
